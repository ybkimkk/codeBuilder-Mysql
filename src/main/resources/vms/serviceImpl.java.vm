#parse("/vms/common/set.vm")
package ${packageName}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${packageName}.entity.${firstUpTableName}Entity;
import ${packageName}.convert.${firstUpTableName}Convert;
import ${packageName}.mapper.${firstUpTableName}Mapper;
import ${packageName}.service.${firstUpTableName}Service;
import ${packageName}.entity.request.page.${firstUpTableName}PageRequestEntity;
import ${packageName}.entity.common.R;
import ${packageName}.entity.request.${firstUpTableName}RequestEntity;
import ${packageName}.entity.response.${firstUpTableName}ResponseEntity;
import lombok.RequiredArgsConstructor;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * @author jinyongbin
 * @since  $date.get('yyyy-MM-dd HH:mm:ss')
 */

@Service("${firstLoTableName}Service")
@RequiredArgsConstructor
public class ${firstUpTableName}ServiceImpl implements ${firstUpTableName}Service {

    private final SqlSessionTemplate sqlSessionTemplate;

    @Override
    public R<${firstUpTableName}ResponseEntity> selectByCondition(${firstUpTableName}RequestEntity request) throws NullPointerException {
        ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
        List<${firstUpTableName}Entity> ${firstLoTableName} = mapper.selectByCondition(${firstUpTableName}Convert.INSTANCE.reqToDo(request));
        ${firstUpTableName}Entity result = ${firstLoTableName}.stream().findFirst().orElseThrow(() -> new NullPointerException("NO DATA"));
        return R.ok(${firstUpTableName}Convert.INSTANCE.doToResp(result));
    }

    @Override
    public R<${firstUpTableName}ResponseEntity> selectById(Long id) throws NullPointerException {
        ${firstUpTableName}RequestEntity ${firstLoTableName}RequestEntity = new ${firstUpTableName}RequestEntity();
        ${firstLoTableName}RequestEntity.setId(id);
        return selectByCondition(${firstLoTableName}RequestEntity);
    }

    @Override
    public R<Page<${firstUpTableName}ResponseEntity>> selectByPage(${firstUpTableName}PageRequestEntity request) throws NullPointerException {
        ${firstUpTableName}Entity ${firstLoTableName} = ${firstUpTableName}Convert.INSTANCE.reqToDo(request);
        ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
        Page<${firstUpTableName}Entity> page = new Page<>(request.getPage(), request.getSize(), mapper.selectCount(new QueryWrapper<>()));
        Page<${firstUpTableName}Entity> doPage = mapper.selectByConditionPage(${firstLoTableName}, page);
        if (CollectionUtils.isEmpty(doPage.getRecords())) {
            throw new NullPointerException("NO DATA");
        }
        return R.ok(${firstUpTableName}Convert.INSTANCE.doPageToRespPage(doPage));
    }

    @Override
    public R<Integer> updateByCondition(${firstUpTableName}RequestEntity request) {
        ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
        return R.ok(mapper.updateById(${firstUpTableName}Convert.INSTANCE.reqToDo(request)));
    }

    @Override
    public R<Integer> updateBatch(List<${firstUpTableName}RequestEntity> request) {
        ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
        return R.ok(mapper.updateBatch(${firstUpTableName}Convert.INSTANCE.reqListToDoList(request)));
    }

    @Override
    public R<Integer> deleteByCondition(${firstUpTableName}RequestEntity request) {
        if (Objects.nonNull(request.getId())) {
            return deleteById(request);
        }
        return deleteBatch(Collections.singletonList(request));
    }

    @Override
    public R<Integer> deleteById(${firstUpTableName}RequestEntity request) {
        ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
        return R.ok(mapper.deleteById(request.getId()));
    }

    @Override
    public R<Integer> deleteBatch(List<${firstUpTableName}RequestEntity> request) {
        try {
            List<Long> ids = request.stream().map(${firstUpTableName}RequestEntity::getId).collect(Collectors.toList());
            ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
            return R.ok(mapper.deleteBatchIds(ids));
        } catch (Exception e) {
            return R.error("delete error");
        }
    }

    @Override
    public R<Integer> insert(${firstUpTableName}RequestEntity request) {
        ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
        return R.ok(mapper.insert(${firstUpTableName}Convert.INSTANCE.reqToDo(request)));
    }

    @Override
    public R<Integer> insertBatch(List<${firstUpTableName}RequestEntity> request) {
        ${firstUpTableName}Mapper mapper = sqlSessionTemplate.getMapper(${firstUpTableName}Mapper.class);
        return R.ok(mapper.insertBatch(${firstUpTableName}Convert.INSTANCE.reqListToDoList(request)));
    }
}
