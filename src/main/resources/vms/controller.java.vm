#parse("vms/macro/common.vm")
#set($firstUpTableName = ${tool.firstStrUpper($tableName)})
package ${packageName}.controller;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import packageName.service.${tableName}Service;
import ${packageName}.entity.request.${firstUpTableName}PageRequest;
import ${packageName}.plugin.ResponseEntity.R;
import ${packageName}.plugin.exception.ServiceException;
import ${packageName}.entity.request.base.UserRequest;
import ${packageName}.entity.response.${firstUpTableName}Response;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
    * @author jinyongbin
    * @since 2023-07-13
*/

@RestController
@RequiredArgsConstructor
@RequestMapping("${tableName}")
public class ${firstUpTableName}Controller {

    private final ${firstUpTableName}Service ${tableName}Service;

    @PostMapping("selectByCondition")
    public R<${firstUpTableName}Response> selectByCondition(@RequestBody ${firstUpTableName}Request request) throws ServiceException {
        return ${tableName}Service.selectByCondition(request);
    }

    @PostMapping("selectByPage")
    public R<Page<${firstUpTableName}Response>> selectByPage(@RequestBody UserPageRequest request) throws ServiceException {
        return ${tableName}Service.selectByPage(request);
    }

    @GetMapping("{id}")
    public R<${firstUpTableName}Response> selectById(@PathVariable("id") Long id) throws ServiceException {
        return ${tableName}Service.selectById(id);
    }

    @PostMapping("updateByCondition")
    public R<Integer> updateByCondition(@RequestBody ${firstUpTableName}Request request) {
        return ${tableName}Service.updateByCondition(request);
    }

    @PostMapping("updateBatch")
    public R<Integer> updateBatch(@RequestBody List<${firstUpTableName}Request> request) {
        return ${tableName}Service.updateBatch(request);
    }

    @PostMapping("insert")
    public R<Integer> insert(@RequestBody ${firstUpTableName}Request request) {
        return ${tableName}Service.insert(request);
    }

    @PostMapping("insertBatch")
    public R<Integer> insertBatch(@RequestBody List<${firstUpTableName}Request> request) {
        return ${tableName}Service.insertBatch(request);
    }

    @PostMapping("deleteById")
    public R<Integer> deleteById(@RequestBody ${firstUpTableName}Request request) {
        return ${tableName}Service.deleteById(request);
    }

    @PostMapping("deleteByCondition")
    public R<Integer> deleteByCondition(@RequestBody ${firstUpTableName}Request request) {
        return ${tableName}Service.deleteByCondition(request);
    }
}


